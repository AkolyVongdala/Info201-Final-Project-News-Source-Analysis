results <- flatten(results)
is.data.frame(results)
print
is.data.frame(bill.name)
bill.name <- results["bills""]
bill.name <- results["bills"]
bill.name <- results[bills]
bill.name <- results[5,]
View(bill.name)
View(bill.name)
bill.name <- results[, 5]
View(bill.name)
bill.data.frame <-data.frame(bills[1,])
source('apikeys.R')
print(api.key)
#install.packages("httr")  # once per machine
library("httr")
#install.packages("jsonlite")  # once per machine
library("jsonlite")
base.url <- 'https://api.propublica.org/congress/v1/'
query.params <- list(api.key = api.key)
congress <- "115"
chamber <- "both"
type <- "introduced"
endpoint <- paste0(base.url, congress,'/', chamber,'/bills/' ,type, '.json')
response <- GET(endpoint, add_headers("X-API-Key" = api.key))
print(response)
body <- content(response, "text")
parsed.data <- fromJSON(body)
bills.data <- (parsed.data$results$bills)
bill.data.frame <-data.frame(bills.data[1,])
is.data.frame(bill.name)
results <- flatten(results)
is.data.frame(results)
bill.data.frame <-data.frame(bills.data[,1])
bill.data.frame <-data.frame(bills.data[,1])
bill.data.frame <-data.frame(bills.data)
View(bill.data.frame)
library("dyplyr")
library("dyplr")
library("dplyr")
bill.data.frame <- data.frame(bills.data) %>% arrange(-introduced_date)
bill.data.frame <- arrange(-introduced_date)
bill.data.frame <- bill.data.frame %>% arrange(-introduced_date)
bill.data.frame <- flatten(bill.data.frame)
bill.data.frame <- bill.data.frame %>% arrange(-introduced_date)
bill.data.frame <- bill.data.frame %>% arrange(introduced_date)
bill.data.frame <- bill.data.frame %>% arrange(desc(introduced_date))
View(bill.data.frame)
bill.data.frame <- bill.data.frame %>% arrange(desc(introduced_date)) %>% filter(bill_id, title, sponsor_name, sponsor_title, sponsor_party, latest_major_action)
bill.data.frame <- bill.data.frame %>% arrange(desc(introduced_date)) %>% filter(bill_id, title, sponsor_name, sponsor_title, sponsor_party, latest_major_action)
bill.data.frame <- flatten(bill.data.frame)
source('apikeys.R')
print(api.key)
#install.packages("httr")  # once per machine
library("httr")
#install.packages("jsonlite")  # once per machine
library("jsonlite")
library("dplyr")
base.url <- 'https://api.propublica.org/congress/v1/'
query.params <- list(api.key = api.key)
congress <- "115"
chamber <- "both"
type <- "introduced"
endpoint <- paste0(base.url, congress,'/', chamber,'/bills/' ,type, '.json')
response <- GET(endpoint, add_headers("X-API-Key" = api.key))
print(response)
body <- content(response, "text")
parsed.data <- fromJSON(body)
bills.data <- (parsed.data$results$bills)
bill.data.frame <- data.frame(bills.data)
bill.data.frame <- flatten(bill.data.frame)
bill.data.frame <- bill.data.frame %>% arrange(desc(introduced_date)) %>% filter(bill_id, title, sponsor_name, sponsor_title, sponsor_party, latest_major_action)
source('apikeys.R')
print(api.key)
#install.packages("httr")  # once per machine
library("httr")
#install.packages("jsonlite")  # once per machine
library("jsonlite")
library("dplyr")
base.url <- 'https://api.propublica.org/congress/v1/'
query.params <- list(api.key = api.key)
congress <- "115"
chamber <- "both"
type <- "introduced"
endpoint <- paste0(base.url, congress,'/', chamber,'/bills/' ,type, '.json')
response <- GET(endpoint, add_headers("X-API-Key" = api.key))
print(response)
body <- content(response, "text")
parsed.data <- fromJSON(body)
bills.data <- (parsed.data$results$bills)
bill.data.frame <- data.frame(bills.data)
bill.data.frame <- flatten(bill.data.frame)
bill.data.frame <- bill.data.frame %>% arrange(desc(introduced_date)) %>% filter(bill_id, title, sponsor_name, sponsor_title, sponsor_party, latest_major_action)
source('apikeys.R')
print(api.key)
#install.packages("httr")  # once per machine
library("httr")
#install.packages("jsonlite")  # once per machine
library("jsonlite")
library("dplyr")
base.url <- 'https://api.propublica.org/congress/v1/'
query.params <- list(api.key = api.key)
congress <- "115"
chamber <- "both"
type <- "introduced"
endpoint <- paste0(base.url, congress,'/', chamber,'/bills/' ,type, '.json')
response <- GET(endpoint, add_headers("X-API-Key" = api.key))
print(response)
body <- content(response, "text")
parsed.data <- fromJSON(body)
bills.data <- (parsed.data$results$bills)
bill.data.frame <- data.frame(bills.data)
bill.data.frame <- bill.data.frame %>% arrange(desc(introduced_date)) %>% filter(bill_id, title, sponsor_name, sponsor_title, sponsor_party, latest_major_action)
source('apikeys.R')
print(api.key)
#install.packages("httr")  # once per machine
library("httr")
#install.packages("jsonlite")  # once per machine
library("jsonlite")
library("dplyr")
base.url <- 'https://api.propublica.org/congress/v1/'
query.params <- list(api.key = api.key)
congress <- "115"
chamber <- "both"
type <- "introduced"
endpoint <- paste0(base.url, congress,'/', chamber,'/bills/' ,type, '.json')
response <- GET(endpoint, add_headers("X-API-Key" = api.key))
print(response)
body <- content(response, "text")
parsed.data <- fromJSON(body)
bills.data <- (parsed.data$results$bills)
bill.data.frame <- data.frame(bills.data)
bill.data.frame <- flatten(bill.data.frame)
bill.data.frame <- bill.data.frame %>% arrange(desc(introduced_date)) %>% filter(bill_id, title, sponsor_name, sponsor_title, sponsor_party, latest)
View(bill.data.frame)
bill.data.frame <- bill.data.frame %>% arrange(desc(introduced_date)) %>% filter(bill.id, title, sponsor_name, sponsor_title, sponsor_party, latest)
source('apikeys.R')
print(api.key)
#install.packages("httr")  # once per machine
library("httr")
#install.packages("jsonlite")  # once per machine
library("jsonlite")
library("dplyr")
base.url <- 'https://api.propublica.org/congress/v1/'
query.params <- list(api.key = api.key)
congress <- "115"
chamber <- "both"
type <- "introduced"
endpoint <- paste0(base.url, congress,'/', chamber,'/bills/' ,type, '.json')
response <- GET(endpoint, add_headers("X-API-Key" = api.key))
print(response)
body <- content(response, "text")
parsed.data <- fromJSON(body)
bills.data <- (parsed.data$results$bills)
bills.data <- flatten(bills.data)
bill.data.frame <- data.frame(bills.data.frame)
bill.data.frame <- bill.data.frame %>% arrange(desc(introduced_date)) %>% filter(bill_id, title, sponsor_name, sponsor_title, sponsor_party, latest)
bill.data.frame <- bill.data.frame %>% arrange(desc(introduced_date)) %>% select(bill_id, title, sponsor_name, sponsor_title, sponsor_party, latest)
bill.data.frame <- bill.data.frame %>% arrange(desc(introduced_date)) %>% select(bill_id, title, sponsor_name, sponsor_title, sponsor_party, latest_major_action)
View(bill.data.frame)
bill.data.frame <- bill.data.frame %>% arrange(desc(introduced_date)) %>% select(bill_id, short_title, sponsor_name, sponsor_title, sponsor_party, latest_major_action, congressdotgov_url)
source('apikeys.R')
print(api.key)
#install.packages("httr")  # once per machine
library("httr")
#install.packages("jsonlite")  # once per machine
library("jsonlite")
library("dplyr")
base.url <- 'https://api.propublica.org/congress/v1/'
query.params <- list(api.key = api.key)
congress <- "115"
chamber <- "both"
type <- "introduced"
endpoint <- paste0(base.url, congress,'/', chamber,'/bills/' ,type, '.json')
response <- GET(endpoint, add_headers("X-API-Key" = api.key))
print(response)
body <- content(response, "text")
parsed.data <- fromJSON(body)
bills.data <- (parsed.data$results$bills)
bill.data.frame <- data.frame(bills.data)
bill.data.frame <- flatten(bill.data.frame)
bill.data.frame <- bill.data.frame %>% arrange(desc(introduced_date)) %>% select(bill_id, short_title, sponsor_name, sponsor_title, sponsor_party, latest_major_action, congressdotgov_url)
View(bill.data.frame)
bill.data.frame <- bill.data.frame[,5]
bill.data.frame <- bill.data.frame[5,]
source('apikeys.R')
print(api.key)
#install.packages("httr")  # once per machine
library("httr")
#install.packages("jsonlite")  # once per machine
library("jsonlite")
library("dplyr")
base.url <- 'https://api.propublica.org/congress/v1/'
query.params <- list(api.key = api.key)
congress <- "115"
chamber <- "both"
type <- "introduced"
endpoint <- paste0(base.url, congress,'/', chamber,'/bills/' ,type, '.json')
response <- GET(endpoint, add_headers("X-API-Key" = api.key))
print(response)
body <- content(response, "text")
parsed.data <- fromJSON(body)
bills.data <- (parsed.data$results$bills)
bill.data.frame <- data.frame(bills.data)
bill.data.frame <- flatten(bill.data.frame)
bill.data.frame <- bill.data.frame %>% arrange(desc(introduced_date)) %>% select(bill_id, short_title, sponsor_name, sponsor_title, sponsor_party, latest_major_action, congressdotgov_url)
bill.data.frame <- bill.data.frame[5,]
View(bill.data.frame)
bill.data.frame <- bill.data.frame[1:5,]
source('apikeys.R')
print(api.key)
#install.packages("httr")  # once per machine
library("httr")
#install.packages("jsonlite")  # once per machine
library("jsonlite")
library("dplyr")
base.url <- 'https://api.propublica.org/congress/v1/'
query.params <- list(api.key = api.key)
congress <- "115"
chamber <- "both"
type <- "introduced"
endpoint <- paste0(base.url, congress,'/', chamber,'/bills/' ,type, '.json')
response <- GET(endpoint, add_headers("X-API-Key" = api.key))
print(response)
body <- content(response, "text")
parsed.data <- fromJSON(body)
bills.data <- (parsed.data$results$bills)
bill.data.frame <- data.frame(bills.data)
bill.data.frame <- flatten(bill.data.frame)
bill.data.frame <- bill.data.frame %>% arrange(desc(introduced_date)) %>% select(bill_id, short_title, sponsor_name, sponsor_title, sponsor_party, latest_major_action, congressdotgov_url)
bill.data.frame <- bill.data.frame[1:5,]
View(bill.data.frame)
vote.endpoint <- paste0(base.url, chamber,'/votes/recent.json')
vote.response <- GET(vote.endpoint, add_headers("X-API-Key" = api.key))
vote.body <- content(vote.response, "text")
vote.parsed.data <- fromJSON(body)
vote.data <- (parsed.data$results$votes)
vote.data.frame <- flatten(vote.data.frame)
vote.endpoint <- paste0(base.url, chamber,'/votes/recent.json')
vote.response <- GET(vote.endpoint, add_headers("X-API-Key" = api.key))
vote.body <- content(vote.response, "text")
vote.parsed.data <- fromJSON(body)
vote.data <- (parsed.data$results$votes)
vote.data.frame <- data.frame(vote.data)
vote.data.frame <- flatten(vote.data.frame)
View(vote.parsed.data)
vote.endpoint <- paste0(base.url, chamber,'/votes/recent.json')
vote.response <- GET(vote.endpoint, add_headers("X-API-Key" = api.key))
vote.body <- content(vote.response, "text")
vote.parsed.data <- fromJSON(body)
vote.data <- (vote.parsed.data$results$votes)
vote.data.frame <- data.frame(vote.data)
vote.data.frame <- flatten(vote.data.frame)
vote.endpoint <- paste0(base.url, chamber,'/votes/recent.json')
vote.response <- GET(vote.endpoint, add_headers("X-API-Key" = api.key))
vote.body <- content(vote.response, "text")
vote.parsed.data <- fromJSON(vote.body)
vote.data <- (vote.parsed.data$results$votes)
vote.data.frame <- data.frame(vote.data)
vote.data.frame <- flatten(vote.data.frame)
View(vote.data.frame)
vote.data.frame <- vote.data.frame %>% arrange(desc(date)) %>% select(description, question, vote_type, result, url)
View(vote.data.frame)
View(vote.data.frame)
vote.endpoint <- paste0(base.url, chamber,'/votes/recent.json')
vote.response <- GET(vote.endpoint, add_headers("X-API-Key" = api.key))
vote.body <- content(vote.response, "text")
vote.parsed.data <- fromJSON(vote.body)
vote.data <- (vote.parsed.data$results$votes)
vote.data.frame <- data.frame(vote.data)
vote.data.frame <- flatten(vote.data.frame)
vote.data.frame <- vote.data.frame %>% arrange(desc(date)) %>% select(role_call, description, question, vote_type, result, url)
View(vote.data.frame)
source('apikeys.R')
#install.packages("httr")  # once per machine
library("httr")
#install.packages("jsonlite")  # once per machine
library("jsonlite")
library("dplyr")
base.url <- 'https://api.propublica.org/congress/v1/'
query.params <- list(api.key = api.key)
## get recent bills
congress <- "115"
chamber <- "both"
type <- "introduced"
bill.endpoint <- paste0(base.url, congress,'/', chamber,'/bills/' ,type, '.json')
response <- GET(bill.endpoint, add_headers("X-API-Key" = api.key))
body <- content(response, "text")
parsed.data <- fromJSON(body)
bills.data <- (parsed.data$results$bills)
bill.data.frame <- data.frame(bills.data)
bill.data.frame <- flatten(bill.data.frame)
bill.data.frame <- bill.data.frame %>% arrange(desc(introduced_date)) %>% select(bill_id, short_title, sponsor_name, sponsor_title, sponsor_party, latest_major_action, congressdotgov_url)
bill.data.frame <- bill.data.frame[1:5,]
## get recent votes
vote.endpoint <- paste0(base.url, chamber,'/votes/recent.json')
vote.response <- GET(vote.endpoint, add_headers("X-API-Key" = api.key))
vote.body <- content(vote.response, "text")
vote.parsed.data <- fromJSON(vote.body)
vote.data <- (vote.parsed.data$results$votes)
vote.data.frame <- data.frame(vote.data)
vote.data.frame <- flatten(vote.data.frame)
vote.data.frame <- vote.data.frame %>% arrange(desc(date)) %>% select(role_call, description, question, vote_type, result, url)
vote.data.frame <- flatten(vote.data.frame)
View(vote.data.frame)
vote.data.frame <- vote.data.frame %>% arrange(desc(date)) %>% select(roll_call, description, question, vote_type, result, url)
View(vote.data.frame)
subject.endpoint <- paste0(base.url, '/bills/subjects/transgender.json')
subject.response <- GET(subject.endpoint, add_headers("X-API-Key" = api.key))
subject.body <- content(subject.response, "text")
subject.parsed.data <- fromJSON(subject.body)
subject.data <- (subject.parsed.data$results$votes)
subject.data.frame <- data.frame(subject.data)
subject.data.frame <- flatten(subject.data.frame)
subject.endpoint <- paste0(base.url, '/bills/subjects/transgender.json')
subject.response <- GET(subject.endpoint, add_headers("X-API-Key" = api.key))
subject.body <- content(subject.response, "text")
subject.parsed.data <- fromJSON(subject.body)
subject.data <- (subject.parsed.data$results$votes)
subject.data.frame <- data.frame(subject.data)
subject.data.frame <- flatten(subject.data.frame)
subject.endpoint <- paste0(base.url, 'bills/subjects/transgender.json')
subject.response <- GET(subject.endpoint, add_headers("X-API-Key" = api.key))
subject.body <- content(subject.response, "text")
subject.parsed.data <- fromJSON(subject.body)
subject.data <- (subject.parsed.data$results$votes)
subject.data.frame <- data.frame(subject.data)
subject.data.frame <- flatten(subject.data.frame)
subject.data.frame <- subject.data.frame %>% arrange(desc(date)) %>% select(roll_call, description, question, vote_type, result, url)
View(subject.parsed.data)
subject.endpoint <- paste0(base.url, 'bills/subjects/transgender.json')
subject.response <- GET(subject.endpoint, add_headers("X-API-Key" = api.key))
subject.body <- content(subject.response, "text")
subject.parsed.data <- fromJSON(subject.body)
subject.data <- (subject.parsed.data$results$votes)
subject.data.frame <- data.frame(subject.data)
subject.data.frame <- flatten(subject.data.frame)
View(subject.parsed.data)
View(subject.data.frame)
View(subject.parsed.data)
subject.endpoint <- paste0(base.url, 'bills/subjects/meat.json')
subject.response <- GET(subject.endpoint, add_headers("X-API-Key" = api.key))
subject.body <- content(subject.response, "text")
subject.parsed.data <- fromJSON(subject.body)
subject.data <- (subject.parsed.data$results$votes)
subject.data.frame <- data.frame(subject.data)
subject.data.frame <- flatten(subject.data.frame)
subject.endpoint <- paste0(base.url, 'bills/subjects/LGBT.json')
subject.response <- GET(subject.endpoint, add_headers("X-API-Key" = api.key))
subject.body <- content(subject.response, "text")
source('apikeys.R')
#install.packages("httr")  # once per machine
library("httr")
#install.packages("jsonlite")  # once per machine
library("jsonlite")
library("dplyr")
base.url <- 'https://api.propublica.org/congress/v1/'
query.params <- list(api.key = api.key)
## get recent bills
congress <- "115"
chamber <- "both"
type <- "introduced"
bill.endpoint <- paste0(base.url, congress,'/', chamber,'/bills/' ,type, '.json')
response <- GET(bill.endpoint, add_headers("X-API-Key" = api.key))
body <- content(response, "text")
parsed.data <- fromJSON(body)
bills.data <- (parsed.data$results$bills)
bill.data.frame <- data.frame(bills.data)
bill.data.frame <- flatten(bill.data.frame)
bill.data.frame <- bill.data.frame %>% arrange(desc(introduced_date)) %>% select(bill_id, short_title, sponsor_name, sponsor_title, sponsor_party, latest_major_action, congressdotgov_url)
bill.data.frame <- bill.data.frame[1:5,]
## get recent votes
vote.endpoint <- paste0(base.url, chamber,'/votes/recent.json')
vote.response <- GET(vote.endpoint, add_headers("X-API-Key" = api.key))
vote.body <- content(vote.response, "text")
vote.parsed.data <- fromJSON(vote.body)
vote.data <- (vote.parsed.data$results$votes)
vote.data.frame <- data.frame(vote.data)
vote.data.frame <- flatten(vote.data.frame)
vote.data.frame <- vote.data.frame %>% arrange(desc(date)) %>% select(roll_call, description, question, vote_type, result, url)
## get bills about transgender issues
subject.endpoint <- paste0(base.url, 'bills/subjects/LGBT.json')
subject.response <- GET(subject.endpoint, add_headers("X-API-Key" = api.key))
subject.body <- content(subject.response, "text")
congress <- "115"
chamber <- "both"
type <- "introduced"
bill.endpoint <- paste0(base.url, congress,'/', chamber,'/bills/' ,type, '.json')
response <- GET(bill.endpoint, add_headers("X-API-Key" = api.key))
body <- content(response, "text")
parsed.data <- fromJSON(body)
bills.data <- (parsed.data$results$bills)
bill.data.frame <- data.frame(bills.data)
bill.data.frame <- flatten(bill.data.frame)
bill.data.frame <- bill.data.frame %>% arrange(desc(introduced_date)) %>% select(bill_id, short_title, sponsor_name, sponsor_title, sponsor_party, latest_major_action, congressdotgov_url)
bill.data.frame <- bill.data.frame[1:5,]
library(shiny); runApp('Documents/Info 201/Info201-Final-Project-News-Source-Analysis/finalproject.R')
setwd("~/Documents/Info 201/Info201-Final-Project-News-Source-Analysis")
runApp('finalproject.R')
runApp('finalproject.R')
runApp()
runApp()
runApp()
install.packages("rsconnect")
library(shiny); runApp('finalproject.R')
runApp()
install.packages("rsconnect")
shiny::runApp()
data <- read.csv("data/facebook-fact-check.csv", stringsAsFactors = FALSE)
View(data)
runApp('finalproject.R')
install.packages("rsconnect")
library(shiny); runApp('finalproject.R')
runApp()
install.packages("rsconnect")
shiny::runApp()
data <- read.csv("data/facebook-fact-check.csv", stringsAsFactors = FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('finalproject.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
all.pages <- data.frame();
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
table <- data.frame();
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
